#!/usr/bin/python3 --

import sys, os, pwd
import hashlib
import base64
import qubesdb
from qubesagent.xdg import launch
from xdg.BaseDirectory import xdg_data_dirs

def main(argv):
    try:
        (arg0, arg,) = argv
    except ValueError:
        print('This service requires an argument', file=sys.stderr)
        sys.exit(1)
    qubes_db = qubesdb.QubesDB()
    # replace default file handlers to open files in disposables
    force_open_dvm = False
    arg_hash = (
        base64.urlsafe_b64encode(hashlib.sha256(arg.encode()).digest())
        .decode()
        .rstrip("=")
    )
    if qubes_db.read("/hash-app-dispvm/" + arg_hash) == arg:
        force_open_dvm = True
    # legacy entry, for short app names only
    if (
        len(arg) <= 37
        and qubes_db.read("/qubes-service/app-dispvm." + arg) is not None
    ):
        force_open_dvm = True
    if force_open_dvm:
        for bad_var in ('XDG_DATA_HOME', 'GNOME_DESKTOP_SESSION_ID'):
            try:
                del os.environ[bad_var]
            except KeyError:
                pass
        os.environ['XDG_DATA_DIRS'] = '/usr/share/qubes/xdg-override'
    for path in xdg_data_dirs:
        subpath = os.path.join(path, 'applications')
        for (raw_volume, directories, files) in os.walk(subpath):
            volume = raw_volume[len(subpath):]
            if volume:
                volume = volume[1:].replace('/', '-') + '-'
            for f in files:
                if not f.endswith('.desktop'):
                    continue
                the_id = volume + f[:-8]
                if the_id == arg:
                    launch(os.path.join(raw_volume, f))
                    return
    print(arg, 'not found in', ':'.join(xdg_data_dirs))
    sys.exit(1)

if __name__ == '__main__':
    main(sys.argv)
